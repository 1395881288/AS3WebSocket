ActionScript 3 WebSocket Client

This is an AS3 implementation of a client library of the WebSocket protocol, as specified in the -06 draft.

I intend to keep this library updated to the latest draft of the IETF WebSocket protocol when new versions are released.  I built this library because I wanted to be able to make use of the latest draft of the protocol, but no browser implements it yet.

See the protocol draft specification at http://www.ietf.org/id/draft-ietf-hybi-thewebsocketprotocol-06.txt


The AS3WebSocket directory contains a Flash Builder 4 Library Project that contains the WebSocket client library.

The testApp directory contains a Flash Builder 4 Air Project that uses the AS3WebSocket library and implements two of the test subprotocols from Andy Green's libwebsockets test server, the dumb-increment-protocol, and the lws-mirror-protocol.  For more detail about the libwebsockets test server, see http://git.warmcat.com/cgi-bin/cgit/libwebsockets


Features:
- Based on -06 draft of the WebSocket protocol
- Support for deflate-stream extension
- Test Adobe Air app implements two of the subprotocols supported by Andy Green's libwebsockets-test-server:
  - dumb-increment-protocol (simple streaming incrementing numbers)
  - lws-mirror-protocol (shared drawing canvas)

Known Issues:
- Fragmentation is not yet supported
- There is no user-provided extension API implemented
- No wss:// support yet


Usage Example:

var websocket:WebSocket = new WebSocket("ws://localhost", "*");
websocket.enableDeflateStream = true;
websocket.addEventListener(WebSocketEvent.CLOSED, handleWebSocketClosed);
websocket.addEventListener(WebSocketEvent.OPEN, handleWebSocketOpen);
websocket.addEventListener(WebSocketEvent.MESSAGE, handleWebSocketMessage);
websocket.connect();

function handleWebSocketOpen(event:WebSocketEvent):void {
  trace("Connected");
}

function handleWebSocketClosed(event:WebSocketEvent):void {
  trace("Disconnected");
}

function handleWebSocketMessage(event:WebSocketEvent):void {
  if (event.message.type === WebSocketMessage.TYPE_UTF8) {
    trace("Got message: " + event.message.utf8Data);
  }
  else if (event.message.type === WebSocketMessage.TYPE_BINARY) {
    trace("Got binary message of length " + event.message.binaryData.length);
  }
}
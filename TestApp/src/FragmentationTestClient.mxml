<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="handleCreationComplete()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.websocket.WebSocket;
			import com.worlize.websocket.WebSocketError;
			import com.worlize.websocket.WebSocketErrorEvent;
			import com.worlize.websocket.WebSocketEvent;
			import com.worlize.websocket.WebSocketFrame;
			import com.worlize.websocket.WebSocketMessage;
			private var webSocket:WebSocket;
			
			private var messageSize:int = 0;
			private var requestedLength:int = 100;
			
			private function log(text:String):void {
				trace(text);
			}
			
			private function handleCreationComplete():void {
				webSocket = new WebSocket("ws://localhost:8080", '*', 'fragmentation-test');
				webSocket.addEventListener(WebSocketEvent.OPEN, handleWebSocketOpen);
				webSocket.addEventListener(WebSocketEvent.FRAME, handleWebSocketFrame);
				webSocket.addEventListener(WebSocketEvent.MESSAGE, handleWebSocketMessage);
				webSocket.addEventListener(WebSocketEvent.CLOSED, handleWebSocketClosed);
				webSocket.addEventListener(WebSocketErrorEvent.CONNECTION_FAIL, handleConnectionFail);
				webSocket.addEventListener(WebSocketErrorEvent.ABNORMAL_CLOSE, handleAbnormalClose);
				webSocket.addEventListener(WebSocketErrorEvent.IO_ERROR, handleIOError);
			}
			
			private function handleConnectClick():void {
				if (webSocket.connected) {
					webSocket.close();
				}
				else {
					connect();
				}
			}
			
			private function connect():void {
				if (!webSocket.connected) {
					webSocket.config.assembleFragments = assembleFragments.selected;
					webSocket.connect();
					messageSize = 0;
				}
			}
			
			private function handleAbnormalClose(event:WebSocketErrorEvent):void {
				log("Abnormal close: " + event.text);
			}
			
			private function handleIOError(event:WebSocketErrorEvent):void {
				log("IO Error: " + event.text);
			}
			
			private function handleConnectionFail(event:WebSocketErrorEvent):void {
				log("Connection failed: " + event.text);
			}
			
			private function handleWebSocketOpen(event:WebSocketEvent):void {
				log("Connected");
				connectButton.label = "Disconnect";
				requestData();
			}
			
			private function handleWebSocketClosed(event:WebSocketEvent):void {
				log("Closed");
				connectButton.label = "Connect";
			}
			
			private function handleWebSocketFrame(event:WebSocketEvent):void {
				log("Frame: 0x" + event.frame.opcode + "; " + event.frame.length + " bytes; Flags: " + renderFlags(event.frame));
				messageSize += event.frame.length;
				if (event.frame.fin) {
					log("Total message size: " + messageSize + " bytes");
					messageSize = 0;
					requestData();
				}
			}
			
			private function handleWebSocketMessage(event:WebSocketEvent):void {
				if (event.message.type === WebSocketMessage.TYPE_BINARY) {
					log("Binary message of length " + event.message.binaryData.length + " received.");
				}
				else {
					log("Text message of " + event.message.utf8Data.length + " characters received.");
					log(event.message.utf8Data);
				}
				requestData();
			}
			
			private function requestData():void {
				webSocket.sendUTF('sendMessage|' + requestedLength);
				requestedLength += Math.ceil(Math.random() * 1024);
			}
			
			private function renderFlags(frame:WebSocketFrame):String {
				var flags:Array = [];
				if (frame.fin) {
					flags.push("[FIN]");
				}
				if (frame.rsv1) {
					flags.push("[RSV1]");
				}
				if (frame.rsv2) {
					flags.push("[RSV2]");
				}
				if (frame.rsv3) {
					flags.push("[RSV3]");
				}
				if (frame.mask) {
					flags.push("[MASK]");
				}
				if (flags.length === 0) {
					return "---";
				}
				return flags.join(' ');
			}
			
		]]>
	</fx:Script>
	
	<s:Group>
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		<s:CheckBox label="Assemble Fragments" selected="false" id="assembleFragments" />
		<s:Button id="connectButton" label="Connect" click="handleConnectClick()" />
	</s:Group>
	
</s:WindowedApplication>

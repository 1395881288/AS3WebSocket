<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="1000" height="500"
					   closing="handleWindowClosing(event)"
					   creationComplete="handleCreationComplete()" viewSourceURL="srcview/index.html">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.websocket.WebSocket;
			import com.worlize.websocket.WebSocketEvent;
			import com.worlize.websocket.WebSocketMessage;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			
			import spark.primitives.Line;
			
			private var websocket:WebSocket;
			
			[Bindable]
			private var dumbIncrementValue:int = 0;
			
			[Bindable]
			private var protocolList:ArrayCollection = new ArrayCollection([
				{
					label: "dumb-increment-protocol",
					value: "dumb-increment-protocol"
				},
				{
					label: "lws-mirror-protocol",
					value: "lws-mirror-protocol"
				}
			]);
			
			private var log:String = "";
			
			private function handleCreationComplete():void {
				websocket = new WebSocket("ws://localhost", "*");
				loadSettings();
				var scrollToBottomTimer:Number = NaN;
				WebSocket.logger = function(text:String):void {
					log += (text + "\n");
					logOutput.text = log + "\n";
					if (isNaN(scrollToBottomTimer)) {
						scrollToBottomTimer = setTimeout(function():void {
							logOutput.scroller.verticalScrollBar.value = logOutput.scroller.verticalScrollBar.maximum;
							scrollToBottomTimer = NaN;
						}, 10);
					}
				}
			}
			
			private function handleWindowClosing(event:Event):void {
				if (websocket.connected) {
					websocket.close();
				}
			}
			
			private function loadSettings():void {
				var sharedObject:SharedObject = SharedObject.getLocal('settings');
				host.text = sharedObject.data.host || 'localhost';
				port.text = sharedObject.data.port || '7681';
				if ('enableDeflateStream' in sharedObject.data) {
					enableDeflateStreamCheckBox.selected = sharedObject.data.enableDeflateStream;
				}
				if ('subprotocolIndex' in sharedObject.data) {
					protocolSelector.selectedIndex = sharedObject.data.subprotocolIndex;
				}
			}
			
			private function saveSettings():void {
				var sharedObject:SharedObject = SharedObject.getLocal('settings');
				sharedObject.data.host = host.text;
				sharedObject.data.port = port.text;
				sharedObject.data.enableDeflateStream = enableDeflateStreamCheckBox.selected;
				sharedObject.data.subprotocolIndex = protocolSelector.selectedIndex;
				sharedObject.flush();
			}
			
			private function openConnection():void {
				saveSettings();
				connectButton.enabled = false;
				websocket = new WebSocket("ws://" + host.text + ":" + port.text, "*", protocolSelector.selectedItem['value'], 5000);
				websocket.enableDeflateStream = enableDeflateStreamCheckBox.selected;
				websocket.connect();
				websocket.addEventListener(WebSocketEvent.CLOSED, handleWebSocketClosed);
				websocket.addEventListener(WebSocketEvent.OPEN, handleWebSocketOpen);
				websocket.addEventListener(WebSocketEvent.MESSAGE, handleWebSocketMessage);
				websocket.addEventListener(IOErrorEvent.IO_ERROR, handleIOError);
				websocket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);
			}
			
			private function handleIOError(event:IOErrorEvent):void {
				connectButton.enabled = true;
				disconnectButton.enabled = false;
			}
			
			private function handleSecurityError(event:SecurityErrorEvent):void {
				connectButton.enabled = true;
				disconnectButton.enabled = false;
			}
			
			private function handleWebSocketClosed(event:WebSocketEvent):void {
				WebSocket.logger("Websocket closed.");
				disconnectButton.enabled = false;
				connectButton.enabled = true;
			}
			
			private function handleWebSocketOpen(event:WebSocketEvent):void {
				WebSocket.logger("Websocket Connected");
				disconnectButton.enabled = true;
			}
			
			private function handleWebSocketMessage(event:WebSocketEvent):void {
				if (event.message.type === WebSocketMessage.TYPE_UTF8) {
					if (websocket.protocol === 'lws-mirror-protocol') {
						var fields:Array = event.message.utf8Data.split(' ');
						var command:String = fields[0];
						trace("Command: '" + command + "'");
						var color:uint = parseInt(String(fields[1]).slice(1), 16);
						var startX:int = parseInt(fields[2], 10);
						var startY:int = parseInt(fields[3], 10);
						drawCanvas.graphics.lineStyle(1, color, 1, true, LineScaleMode.NORMAL, CapsStyle.SQUARE, JointStyle.MITER);
						if (command === 'c') {
							// c #7A9237 487 181 14;
							var radius:int = parseInt(fields[4], 10);
							drawCanvas.graphics.drawCircle(startX, startY, radius);
						}
						else if (command === 'd') {
							var endX:int = parseInt(fields[4], 10);
							var endY:int = parseInt(fields[5], 10);
							drawCanvas.graphics.moveTo(startX, startY);
							drawCanvas.graphics.lineTo(endX, endY);
						}
					}
					else if (websocket.protocol === 'dumb-increment-protocol') {
						dumbIncrementValue = parseInt(event.message.utf8Data, 10);
					}
					else {
						WebSocket.logger(event.message.utf8Data);						
					}
				}
				else if (event.message.type === WebSocketMessage.TYPE_BINARY) {
					WebSocket.logger("Binary message received.  Length: " + event.message.binaryData.length);
				}
			}
			
			private var drawing:Boolean = false;
			private var startMouseX:Number;
			private var startMouseY:Number;
			
			private function handleMouseDown(event:MouseEvent):void {
				if (websocket.connected && websocket.protocol === 'lws-mirror-protocol') {
					drawing = true;
					startMouseX = drawCanvas.mouseX;
					startMouseY = drawCanvas.mouseY;
					stage.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
				}
			}
			
			private function handleMouseUp(event:MouseEvent):void {
				stage.removeEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
				drawing = false;
			}
			
			private function handleMouseMove(event:MouseEvent):void {
				if (drawing && websocket.connected && websocket.protocol === 'lws-mirror-protocol') {
					var sx:int = startMouseX;
					var sy:int = startMouseY;
					var ex:int = startMouseX = drawCanvas.mouseX;
					var ey:int = startMouseY = drawCanvas.mouseY;
					var color:uint = 0xDD00CC;
					websocket.sendUTF(['d', '#' + color.toString(16), sx, sy, ex, ey].join(' ') + ";");
				}
			}
			
			private function resetCounter():void {
				if (websocket.connected && websocket.protocol === 'dumb-increment-protocol') {
					websocket.sendUTF("reset\n");
				}
			}
			
			private function closeConnection():void {
				WebSocket.logger("Disconnecting.");
				websocket.close();
			}
			
			private function clearCanvas():void {
				drawCanvas.graphics.clear();
			}
			
			private function clearLog():void {
				log = "";
				logOutput.text = log;
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout gap="5" verticalAlign="top" />
	</s:layout>
	
	<s:VGroup gap="10" horizontalAlign="center" width="510">
		<s:HGroup verticalAlign="middle"
				  paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
			<s:Label text="Host" />
			<s:TextInput id="host" />
			<mx:Spacer width="5" />
			<s:Label text="Port" />
			<s:TextInput text="7681" id="port" width="50" />
			<s:DropDownList dataProvider="{protocolList}" width="200" selectedIndex="0" id="protocolSelector" />
		</s:HGroup>
		<s:HGroup verticalAlign="middle"
				  paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
			<s:CheckBox label="Enable deflate-stream" id="enableDeflateStreamCheckBox" selected="true" />
			<s:Button id="disconnectButton" enabled="false" label="Disconnect" click="closeConnection();" />
			<s:Button id="connectButton" label="Connect" click="openConnection();" />
		</s:HGroup>
		
		<s:VGroup horizontalAlign="center" width="100%">
			<s:Label text="Dumb Increment value: {dumbIncrementValue}" />
			<s:Button label="Reset Counter" click="resetCounter()" />
		</s:VGroup>
		
		<s:Group width="502" height="306"
				 clipAndEnableScrolling="true"
				 mouseDown="handleMouseDown(event)"
				 mouseMove="handleMouseMove(event)">
			<s:Rect width="100%" height="100%">
				<s:stroke>
					<s:SolidColorStroke color="#000000" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="#DDDDDD" />
				</s:fill>
			</s:Rect>
			<s:Graphic id="drawCanvas" width="100%" height="100%" />
		</s:Group>
		
		<s:Button label="Clear Canvas" click="clearCanvas()" />
	</s:VGroup>
	
	<s:VGroup horizontalAlign="center" gap="10" width="100%" height="100%" paddingBottom="7">
		<s:TextArea id="logOutput" width="100%" height="100%" />
		<s:Button label="Clear Log" click="clearLog()" />
	</s:VGroup>
	
	
</s:WindowedApplication>

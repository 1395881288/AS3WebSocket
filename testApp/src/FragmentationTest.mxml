<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
	<![CDATA[
		import com.worlize.websocket.WebSocket;
		import com.worlize.websocket.WebSocketErrorEvent;
		import com.worlize.websocket.WebSocketEvent;
		import com.worlize.websocket.WebSocketFrame;
		private var websocket:WebSocket;

		private var requestedLength:uint;
		
		private var messageLength:uint = 0;

		private function log(message:String):void {
			trace(message);
//			output.text = output.text + "\n" + message;
		}
		
		private function handleConnectClick():void {
			if (websocket && websocket.connected) {
				websocket.close();
			}
			
			websocket = new WebSocket("ws://localhost:8080", "*", "fragmentation-test");
			websocket.config.assembleFragments = false;
			
			websocket.addEventListener(WebSocketEvent.MESSAGE, handleWebSocketMessage);
			websocket.addEventListener(WebSocketEvent.FRAME, handleWebSocketFrame);
			
			websocket.addEventListener(WebSocketEvent.OPEN, function(event:WebSocketEvent):void {
				log("Connected");
				requestedLength = 63000;
				messageLength = 0;
				requestData();
			});
			websocket.addEventListener(WebSocketEvent.CLOSED, function(event:WebSocketEvent):void {
				log("Disconnected");
			});
			websocket.addEventListener(WebSocketErrorEvent.CONNECTION_FAIL, function(event:WebSocketErrorEvent):void {
				log("Connection Failed");
			});
			
			websocket.connect();
		}
		
		private function requestData():void {
			if (websocket && websocket.connected) {
				websocket.sendUTF('sendMessage|' + requestedLength);
				requestedLength += Math.ceil(Math.random() * 1024);
			}
		}
		
		private function handleWebSocketMessage(event:WebSocketEvent):void {
			log("Received " + event.message.utf8Data.length + " character utf-8 message.");
			requestData();
		}
		
		private function handleWebSocketFrame(event:WebSocketEvent):void {
			var frame:WebSocketFrame = event.frame;
			
			log("Frame: 0x" + frame.opcode.toString(16) + "; Bytes: " + frame.length + "; Flags: " + renderFlags(frame));
			
			if (frame.fin) {
				log("Aggregate message size: " + messageLength + " bytes.");
				messageLength = 0;
				requestData();
			}
		}
		
		private function renderFlags(frame:WebSocketFrame):String {
			var flags:Array = [];
			if (frame.fin) {
				flags.push('[FIN]');
			}
			if (frame.rsv1) {
				flags.push('[RSV1]');
			}
			if (frame.rsv2) {
				flags.push('[RSV2]');
			}
			if (frame.rsv3) {
				flags.push('[RSV3]');
			}
			if (frame.mask) {
				flags.push('[MASK]');
			}
			if (flags.length === 0) {
				return "---";
			}
			return flags.join(' ');
		}
	]]>
	</fx:Script>
	
	<s:VGroup>
		<s:Button label="Connect" click="handleConnectClick()" />
		<mx:Text id="output" />
	</s:VGroup>
	
	
</s:WindowedApplication>
